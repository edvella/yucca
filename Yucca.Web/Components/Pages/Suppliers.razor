@page "/suppliers"
@using Yucca.Inventory
@using Yucca.Web.Services

@inject SupplierService SupplierService
@inject IJSRuntime JSRuntime

@rendermode InteractiveServer
@attribute [StreamRendering(true)]

<PageTitle>Suppliers</PageTitle>

<h1>Suppliers</h1>

@if (_suppliers is null)
{
    <p><em>Loading...</em></p>
}
else if (_suppliers.Count is 0)
{
    <p><em>No suppliers yet.</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>City</th>
                <th>Phone</th>
                <th>Website</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var supplier in _suppliers)
            {
                <tr @onclick="() => SelectSupplier(supplier.Id)" style="cursor: pointer;" class="@(supplier.Id == _supplier?.Id ? "table-active" : "")">
                    <td>@supplier.Name</td>
                    <td>@supplier.City</td>
                    <td>@supplier.ContactPhone</td>
                    <td>@supplier.Website</td>
                </tr>
            }
        </tbody>
    </table>
}

<h4>@(_isNewSupplier ? "Add Supplier" : "Edit Supplier")</h4>
<form method="post" @onsubmit="SaveSupplier" @formname="supplier-form">
    <AntiforgeryToken />
    <div class="form-group">
        <label for="supplier-id">ID:</label>
        <InputText id="supplier-id" class="form-control" @bind-Value="_supplier!.Id" type="text" readonly />
    </div>
    <div class="form-group">
        <label for="supplier-name">Name:</label>
        <InputText id="supplier-name" class="form-control" @bind-Value="_supplier!.Name" type="text" />
    </div>
    <div class="form-group">
        <label for="supplier-address-line1">Address Line 1:</label>
        <InputText id="supplier-address-line1" class="form-control" @bind-Value="_supplier!.AddressLine1" type="text" />
    </div>
    <div class="form-group">
        <label for="supplier-address-line2">Address Line 2:</label>
        <InputText id="supplier-address-line2" class="form-control" @bind-Value="_supplier!.AddressLine2" type="text" />
    </div>
    <div class="form-group">
        <label for="supplier-city">City:</label>
        <InputText id="supplier-city" class="form-control" @bind-Value="_supplier!.City" type="text" />
    </div>
    <div class="form-group">
        <label for="supplier-state">State:</label>
        <InputText id="supplier-state" class="form-control" @bind-Value="_supplier!.State" type="text" />
    </div>
    <div class="form-group">
        <label for="supplier-postcode">Post Code:</label>
        <InputText id="supplier-postcode" class="form-control" @bind-Value="_supplier!.PostCode" type="text" />
    </div>
    <div class="form-group">
        <label for="supplier-country">Country:</label>
        <InputText id="supplier-country" class="form-control" @bind-Value="_supplier!.Country" type="text" />
    </div>
    <div class="form-group">
        <label for="supplier-contact-phone">Contact Phone:</label>
        <InputText id="supplier-contact-phone" class="form-control" @bind-Value="_supplier!.ContactPhone" type="tel" />
    </div>
    <div class="form-group">
        <label for="supplier-email">Email:</label>
        <InputText id="supplier-email" class="form-control" @bind-Value="_supplier!.Email" type="email" />
    </div>
    <div class="form-group">
        <label for="supplier-website">Website:</label>
        <InputText id="supplier-website" class="form-control" @bind-Value="_supplier!.Website" type="url" />
    </div>
    <div class="form-group">
        <label for="supplier-tax-number">Tax Number:</label>
        <InputText id="supplier-tax-number" class="form-control" @bind-Value="_supplier!.TaxNumber" type="text" />
    </div>
    <div>
        <button type="submit" class="btn btn-primary">@(_isNewSupplier ? "Add" : "Update")</button>
    </div>
</form>

@code {

    private List<Supplier>? _suppliers;

    [SupplyParameterFromForm]
    private Supplier? _supplier { get; set; }

    private bool _isNewSupplier = true;

    protected override async Task OnInitializedAsync()
    {
        _supplier ??= new();
        await RefreshSupplierList();
    }

    private async Task RefreshSupplierList()
    {
        _suppliers = await SupplierService.GetSuppliers();
        StateHasChanged();
    }

    private async Task SelectSupplier(string id)
    {
        _supplier = await SupplierService.GetSupplierById(id);
        _isNewSupplier = false;

        StateHasChanged();
    }

    private void CreateNewSupplier()
    {
        _supplier = new();
        _isNewSupplier = true;
    }

    private async Task SaveSupplier()
    {
        if (_isNewSupplier)
        {
            if (await SupplierService.AddSupplier(_supplier!))
            {
                await RefreshSupplierList();
                await JSRuntime.InvokeVoidAsync("alert", "Supplier added successfully!");
                _supplier = new();
            }
        }
        else
        {
            // TODO: This will need implementation in the SupplierService
            await JSRuntime.InvokeVoidAsync("alert", "Update functionality not implemented yet");
        }
        StateHasChanged();
    }
}